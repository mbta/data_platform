name: CI

on: [pull_request]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  asdf:
    name: ASDF
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # cache the ASDF directory, using the values from .tool-versions
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
        id: asdf-cache
      # only run `asdf install` if we didn't hit the cache
      - uses: asdf-vm/actions/install@v1
        if: steps.asdf-cache.outputs.cache-hit != 'true'
      # only install Hex/Rebar if we didn't hit the cache
      - if: steps.asdf-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force

  ex_build:
    name: Elixir Build and test
    runs-on: ubuntu-latest
    needs: asdf
    defaults:
      run:
        working-directory: ex_cubic_ingestion

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: dataplatform_test
      DB_USER: postgres
      DB_PASSWORD: postgres
      CUBIC_DMAP_BASE_URL: https://dmap_base_url
      CUBIC_DMAP_CONTROLLED_USER_API_KEY: controlled_api_key
      CUBIC_DMAP_PUBLIC_USER_API_KEY: public_api_key

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{env.DB_PASSWORD}}
          POSTGRES_USER:  ${{env.DB_USER}}
          POSTGRES_DB: ${{env.DB_NAME}}
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
        id: asdf-cache
      - uses: mbta/actions/reshim-asdf@v1
      # The asdf job should have prepared the cache. exit if it didn't for some reason
      - run: exit 1
        if: steps.asdf-cache.outputs.cache-hit != 'true'
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: ex_cubic_ingestion/deps
          key: ${{ runner.os }}-mix-v2-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-v2
      - name: Install dependencies (if needed)
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get
      - name: Compile (warnings as errors)
        run: mix compile --force --warnings-as-errors
      - name: Check formatting
        run: mix format --check-formatted
      - name: Credo
        run: mix credo --strict
      - name: Run tests
        run: mix test --cover
      - name: Save PR information
        run: |
          echo "${{ github.event.pull_request.number }}" > cover/PR_NUMBER
          echo "${{ github.event.pull_request.head.sha }}" > cover/PR_SHA
        if: github.event.pull_request
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: elixir-lcov
          path: ex_cubic_ingestion/cover/
          if-no-files-found: error
      - uses: mbta/actions/dialyzer@v1
        with:
          working-directory: ex_cubic_ingestion

  py_build:
    name: Python Build and test
    runs-on: ubuntu-latest
    needs: asdf
    defaults:
      run:
        working-directory: py_cubic_ingestion

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}
        id: asdf-cache
      - uses: mbta/actions/reshim-asdf@v1
      # The asdf job should have prepared the cache. exit if it didn't for some reason
      - run: exit 1
        if: steps.asdf-cache.outputs.cache-hit != 'true'
      - name: Install dependencies
        run: poetry install
      - name: Check code formatting with Black
        run: poetry run black . --check
      - name: Check static typing with mypy
        run: poetry run mypy .
      - name: Run linting with pylint
        run: poetry run pylint lib/ tests/
      - name: Run tests with coverage
        run: poetry run coverage run -m pytest
      - name: Generate coverage file
        run: poetry run coverage lcov -o cover/lcov.info
      - name: Save PR information
        run: |
          echo "${{ github.event.pull_request.number }}" > cover/PR_NUMBER
          echo "${{ github.event.pull_request.head.sha }}" > cover/PR_SHA
        if: github.event.pull_request
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: python-lcov
          path: py_cubic_ingestion/cover/
          if-no-files-found: error
